#include "platon/merkle/simple_merkle_tree.hpp"
#include <vector>
#include "platon/merkle/hash.hpp"
#include "unit_test.hpp"
std::vector<h256> test_data = {
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000000")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000001")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000002")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000003")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000004")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000005")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000006")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000007")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000008")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000009")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000000a")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000000b")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000000c")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000000d")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000000e")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000000f")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000010")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000011")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000012")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000013")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000014")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000015")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000016")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000017")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000018")),
    h256(std::string_view(
        "0x0000000000000000000000000000000000000000000000000000000000000019")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000001a")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000001b")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000001c")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000001d")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000001e")),
    h256(std::string_view(
        "0x000000000000000000000000000000000000000000000000000000000000001f"))};

h256 test_sha256_root = h256(std::string_view(
    "0x7b90d40f0fc9803f203529d7a937de5fef803f756cbf63001da11151689f415f"));

platon::merkle::SimpleMerkleTree<"s"_n, platon::merkle::hash::Sha256, 32> tree;

platon::merkle::SimpleMerkleTree<"ss"_n, platon::merkle::hash::Sha256, 32>
    tree2;

TEST_CASE(merkle_tree, insert) {
  h256 root;
  for (const auto &h : test_data) {
    root = tree.InsertLeaf(h);
  }
  ASSERT_EQ(test_sha256_root, root, "expect:", test_sha256_root.toString(),
            "actual:", root.toString());
  ASSERT_EQ(tree.LeafCount(), test_data.size(), "expect:", test_data.size(),
            "actual:", tree.LeafCount());
}

TEST_CASE(merkle_tree, insertleaves) {
  auto root = tree2.InsertLeaves(test_data);
  ASSERT_EQ(test_sha256_root, root, "expect:", test_sha256_root.toString(),
            "actual:", root.toString());
  ASSERT_EQ(tree2.LeafCount(), test_data.size(), "expect:", test_data.size(),
            "actual:", tree.LeafCount());
}

TEST_CASE(merkle_tree, frontier) {
  for (size_t i = 0; i < 32; i++) {
    ASSERT_EQ(tree.FrontierValue(i), tree2.FrontierValue(i));
  }
}

UNITTEST_MAIN() {
  RUN_TEST(merkle_tree, insert);
  RUN_TEST(merkle_tree, insertleaves);
  RUN_TEST(merkle_tree, frontier);
}
