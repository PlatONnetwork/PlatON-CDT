#include <array>
#include <tuple>
#include <vector>
#include "platon/bigint.hpp"
#include "platon/solidity/sol_cross_call.hpp"
#include "platon/solidity/sol_serialize.hpp"
#include "unit_test.hpp"

namespace cross {
struct AbiTest_SA;
struct AbiTest_SB;
struct AbiTest_SC;
struct AbiTest_SD;

struct AbiTest_SA {
  std::vector<std::uint256_t> a;
  std::string b;
  std::vector<std::int256_t> c;
  std::array<uint8_t, 24> d;
  std::array<uint8_t, 32> e;
  std::array<uint8_t, 12> f;
  __uint128_t g;
  std::vector<int8_t> h;
  bool i;
  SOLIDITY_SERIALIZE(AbiTest_SA, (a)(b)(c)(d)(e)(f)(g)(h)(i))
};

struct AbiTest_SB {
  int16_t a;
  AbiTest_SA b;
  SOLIDITY_SERIALIZE(AbiTest_SB, (a)(b))
};

struct AbiTest_SC {
  int32_t a;
  int64_t b;
  AbiTest_SB c;
  SOLIDITY_SERIALIZE(AbiTest_SC, (a)(b)(c))
};

struct AbiTest_SD {
  std::vector<int32_t> a;
  std::vector<std::string> b;
  std::vector<int64_t> c;
  SOLIDITY_SERIALIZE(AbiTest_SD, (a)(b)(c))
};

template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SA>, bool> getA(const platon::Address &_addr_,
                                              const value_type &_value_,
                                              const gas_type &gas) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SA>>(_addr_, _value_, gas, "getA()");
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SD>, bool> getD(const platon::Address &_addr_,
                                              const value_type &_value_,
                                              const gas_type &gas) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SD>>(_addr_, _value_, gas, "getD()");
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<std::vector<uint8_t>, std::vector<uint8_t>>, bool>
setBytes(const platon::Address &_addr_, const value_type &_value_,
         const gas_type &gas, const std::vector<uint8_t> &a,
         const std::vector<uint8_t> &b) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<std::vector<uint8_t>, std::vector<uint8_t>>>(
      _addr_, _value_, gas, "setBytes(bytes,bytes)", a, b);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SC>, bool> setC(const platon::Address &_addr_,
                                              const value_type &_value_,
                                              const gas_type &gas,
                                              const AbiTest_SC &v) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SC>>(
      _addr_, _value_, gas,
      "setC((int32,int64,(int16,(uint256[],string,int256[],bytes24,bytes32,"
      "bytes12,uint128,int8[],bool))))",
      v);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<std::string, std::string>, bool> setString(
    const platon::Address &_addr_, const value_type &_value_,
    const gas_type &gas, const std::string &a, const std::string &b) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<std::string, std::string>>(_addr_, _value_, gas,
                                            "setString(string,string)", a, b);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SA>, bool> setA(const platon::Address &_addr_,
                                              const value_type &_value_,
                                              const gas_type &gas,
                                              const AbiTest_SA &v) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SA>>(_addr_, _value_, gas,
                              "setA((uint256[],string,int256[],bytes24,bytes32,"
                              "bytes12,uint128,int8[],bool))",
                              v);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SA, AbiTest_SD>, bool> setAD(
    const platon::Address &_addr_, const value_type &_value_,
    const gas_type &gas, const AbiTest_SA &v, const AbiTest_SD &v2) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SA, AbiTest_SD>>(
      _addr_, _value_, gas,
      "setAD((uint256[],string,int256[],bytes24,bytes32,bytes12,uint128,int8[],"
      "bool),(int32[],string[],int64[]))",
      v, v2);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<uint8_t, uint32_t, __int128_t, std::int256_t>, bool>
setInt(const platon::Address &_addr_, const value_type &_value_,
       const gas_type &gas, const uint8_t &a, const uint32_t &b,
       const __int128_t &c, const std::int256_t &d) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<uint8_t, uint32_t, __int128_t, std::int256_t>>(
      _addr_, _value_, gas, "setInt(uint8,uint32,int128,int256)", a, b, c, d);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SB>, bool> setB(const platon::Address &_addr_,
                                              const value_type &_value_,
                                              const gas_type &gas,
                                              const AbiTest_SB &v) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SB>>(_addr_, _value_, gas,
                              "setB((int16,(uint256[],string,int256[],bytes24,"
                              "bytes32,bytes12,uint128,int8[],bool)))",
                              v);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SD>, bool> setD(const platon::Address &_addr_,
                                              const value_type &_value_,
                                              const gas_type &gas,
                                              const AbiTest_SD &v) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SD>>(_addr_, _value_, gas,
                              "setD((int32[],string[],int64[]))", v);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<std::vector<uint32_t>, std::vector<std::int256_t>>, bool>
setIntArray(const platon::Address &_addr_, const value_type &_value_,
            const gas_type &gas, const std::vector<uint32_t> &a,
            const std::vector<std::int256_t> &b) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<std::vector<uint32_t>, std::vector<std::int256_t>>>(
      _addr_, _value_, gas, "setIntArray(uint32[],int256[])", a, b);
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SB>, bool> getB(const platon::Address &_addr_,
                                              const value_type &_value_,
                                              const gas_type &gas) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SB>>(_addr_, _value_, gas, "getB()");
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<AbiTest_SC>, bool> getC(const platon::Address &_addr_,
                                              const value_type &_value_,
                                              const gas_type &gas) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<AbiTest_SC>>(_addr_, _value_, gas, "getC()");
}
template <typename value_type, typename gas_type>
std::tuple<std::tuple<std::array<uint8_t, 24>, std::array<uint8_t, 32>>, bool>
setArray(const platon::Address &_addr_, const value_type &_value_,
         const gas_type &gas, const std::array<uint8_t, 24> &a,
         const std::array<uint8_t, 32> &b) {
  return platon::solidity::abi::sol_call_with_return_value<
      std::tuple<std::array<uint8_t, 24>, std::array<uint8_t, 32>>>(
      _addr_, _value_, gas, "setArray(bytes24,bytes32)", a, b);
}
}  // namespace cross

const std::string kSolCode =
    "608060405234801561001057600080fd5b50614a43806100206000396000f3fe6080604052"
    "34801561001057600080fd5b50600436106100e85760003560e01c8063a2375d1e1161008c"
    "578063b9490abe11610066578063b9490abe1461029b578063d46300fd146102ce578063e4"
    "449078146102ec578063fa14ddc11461031d576100e8565b8063a2375d1e1461021c578063"
    "a9a3aa501461023a578063b5e143671461026a576100e8565b80636e1a1336116100c85780"
    "636e1a13361461016c5780636f3792491461019d5780639d467e08146101cd578063a1c519"
    "15146101fe576100e8565b8062a05579146100ed578062bc92221461011d5780631a14ff7a"
    "1461014e575b600080fd5b61010760048036038101906101029190613820565b61034d565b"
    "604051610114919061428e565b60405180910390f35b610137600480360381019061013291"
    "9061365a565b61086a565b6040516101459291906141a5565b60405180910390f35b610156"
    "6109c1565b60405161016391906142b0565b60405180910390f35b61018660048036038101"
    "9061018191906136c6565b610bb0565b6040516101949291906141dc565b60405180910390"
    "f35b6101b760048036038101906101b291906137df565b610d07565b6040516101c4919061"
    "426c565b60405180910390f35b6101e760048036038101906101e291906135b2565b61116f"
    "565b6040516101f5929190614145565b60405180910390f35b61020661117f565b60405161"
    "0213919061426c565b60405180910390f35b61022461146c565b604051610231919061428e"
    "565b60405180910390f35b610254600480360381019061024f9190613732565b6117a7565b"
    "6040516102619190614213565b60405180910390f35b610284600480360381019061027f91"
    "9061361e565b611bad565b60405161029292919061417c565b60405180910390f35b6102b5"
    "60048036038101906102b091906138a2565b611bbd565b6040516102c594939291906142d2"
    "565b60405180910390f35b6102d6611bda565b6040516102e39190614213565b6040518091"
    "0390f35b61030660048036038101906103019190613773565b611e96565b60405161031492"
    "9190614235565b60405180910390f35b61033760048036038101906103329190613861565b"
    "6124ed565b60405161034491906142b0565b60405180910390f35b61035561273b565b8160"
    "1360008201518160000160006101000a81548163ffffffff021916908360030b63ffffffff"
    "16021790555060208201518160000160046101000a81548167ffffffffffffffff02191690"
    "8360070b67ffffffffffffffff160217905550604082015181600101600082015181600001"
    "60006101000a81548161ffff021916908360010b61ffff1602179055506020820151816001"
    "016000820151816000019080519060200190610408929190612768565b5060208201518160"
    "010190805190602001906104259291906127b5565b50604082015181600201908051906020"
    "019061044292919061283b565b5060608201518160030160006101000a81548177ffffffff"
    "ffffffffffffffffffffffffffffffffffffffff021916908360401c021790555060808201"
    "51816004015560a08201518160050160006101000a8154816bffffffffffffffffffffffff"
    "021916908360a01c021790555060c082015181600501600c6101000a8154816fffffffffff"
    "ffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790"
    "555060e082015181600601908051906020019061050c929190612888565b50610100820151"
    "8160070160006101000a81548160ff02191690831515021790555050505050905050601360"
    "40518060600160405290816000820160009054906101000a900460030b60030b60030b8152"
    "6020016000820160049054906101000a900460070b60070b60070b81526020016001820160"
    "40518060400160405290816000820160009054906101000a900460010b60010b60010b8152"
    "60200160018201604051806101200160405290816000820180548060200260200160405190"
    "81016040528092919081815260200182805480156106095760200282019190600052602060"
    "0020905b8154815260200190600101908083116105f5575b50505050508152602001600182"
    "018054610622906147f9565b80601f01602080910402602001604051908101604052809291"
    "9081815260200182805461064e906147f9565b801561069b5780601f106106705761010080"
    "835404028352916020019161069b565b820191906000526020600020905b81548152906001"
    "019060200180831161067e57829003601f168201915b505050505081526020016002820180"
    "54806020026020016040519081016040528092919081815260200182805480156106f35760"
    "2002820191906000526020600020905b8154815260200190600101908083116106df575b50"
    "5050505081526020016003820160009054906101000a900460401b67ffffffffffffffff19"
    "1667ffffffffffffffff191681526020016004820154815260200160058201600090549061"
    "01000a900460a01b73ffffffffffffffffffffffffffffffffffffffff191673ffffffffff"
    "ffffffffffffffffffffffffffffff1916815260200160058201600c9054906101000a9004"
    "6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166f"
    "ffffffffffffffffffffffffffffffff168152602001600682018054806020026020016040"
    "51908101604052809291908181526020018280548015610837576020028201919060005260"
    "20600020906000905b82829054906101000a900460000b60000b8152602001906001019060"
    "20826000010492830192600103820291508084116108005790505b50505050508152602001"
    "6007820160009054906101000a900460ff1615151515815250508152505081525050905091"
    "9050565b6060808360019080519060200190610883929190612932565b5082600190805190"
    "6020019061089a929190612932565b506001808180546108aa906147f9565b80601f016020"
    "80910402602001604051908101604052809291908181526020018280546108d6906147f956"
    "5b80156109235780601f106108f857610100808354040283529160200191610923565b8201"
    "91906000526020600020905b81548152906001019060200180831161090657829003601f16"
    "8201915b50505050509150808054610936906147f9565b80601f0160208091040260200160"
    "405190810160405280929190818152602001828054610962906147f9565b80156109af5780"
    "601f10610984576101008083540402835291602001916109af565b82019190600052602060"
    "0020905b81548152906001019060200180831161099257829003601f168201915b50505050"
    "509050915091509250929050565b6109c96129b8565b601d60405180606001604052908160"
    "00820180548060200260200160405190810160405280929190818152602001828054801561"
    "0a4b57602002820191906000526020600020906000905b82829054906101000a900460030b"
    "60030b81526020019060040190602082600301049283019260010382029150808411610a14"
    "5790505b505050505081526020016001820180548060200260200160405190810160405280"
    "9291908181526020016000905b82821015610b25578382906000526020600020018054610a"
    "98906147f9565b80601f016020809104026020016040519081016040528092919081815260"
    "2001828054610ac4906147f9565b8015610b115780601f10610ae657610100808354040283"
    "529160200191610b11565b820191906000526020600020905b815481529060010190602001"
    "808311610af457829003601f168201915b505050505081526020019060010190610a79565b"
    "50505050815260200160028201805480602002602001604051908101604052809291908181"
    "526020018280548015610ba257602002820191906000526020600020906000905b82829054"
    "906101000a900460070b60070b815260200190600801906020826007010492830192600103"
    "82029150808411610b6b5790505b505050505081525050905090565b606080836000908051"
    "9060200190610bc99291906127b5565b508260009080519060200190610be09291906127b5"
    "565b50600080818054610bf0906147f9565b80601f01602080910402602001604051908101"
    "60405280929190818152602001828054610c1c906147f9565b8015610c695780601f10610c"
    "3e57610100808354040283529160200191610c69565b820191906000526020600020905b81"
    "5481529060010190602001808311610c4c57829003601f168201915b505050505091508080"
    "54610c7c906147f9565b80601f016020809104026020016040519081016040528092919081"
    "8152602001828054610ca8906147f9565b8015610cf55780601f10610cca57610100808354"
    "040283529160200191610cf5565b820191906000526020600020905b815481529060010190"
    "602001808311610cd857829003601f168201915b5050505050905091509150925092905056"
    "5b610d0f6129d9565b81600a60008201518160000160006101000a81548161ffff02191690"
    "8360010b61ffff160217905550602082015181600101600082015181600001908051906020"
    "0190610d5d929190612768565b506020820151816001019080519060200190610d7a929190"
    "6127b5565b506040820151816002019080519060200190610d9792919061283b565b506060"
    "8201518160030160006101000a81548177ffffffffffffffffffffffffffffffffffffffff"
    "ffffffff021916908360401c02179055506080820151816004015560a08201518160050160"
    "006101000a8154816bffffffffffffffffffffffff021916908360a01c021790555060c082"
    "015181600501600c6101000a8154816fffffffffffffffffffffffffffffffff0219169083"
    "6fffffffffffffffffffffffffffffffff16021790555060e0820151816006019080519060"
    "200190610e61929190612888565b506101008201518160070160006101000a81548160ff02"
    "19169083151502179055505050905050600a60405180604001604052908160008201600090"
    "54906101000a900460010b60010b60010b8152602001600182016040518061012001604052"
    "90816000820180548060200260200160405190810160405280929190818152602001828054"
    "8015610f1257602002820191906000526020600020905b8154815260200190600101908083"
    "11610efe575b50505050508152602001600182018054610f2b906147f9565b80601f016020"
    "8091040260200160405190810160405280929190818152602001828054610f57906147f956"
    "5b8015610fa45780601f10610f7957610100808354040283529160200191610fa4565b8201"
    "91906000526020600020905b815481529060010190602001808311610f8757829003601f16"
    "8201915b505050505081526020016002820180548060200260200160405190810160405280"
    "9291908181526020018280548015610ffc57602002820191906000526020600020905b8154"
    "81526020019060010190808311610fe8575b50505050508152602001600382016000905490"
    "6101000a900460401b67ffffffffffffffff191667ffffffffffffffff1916815260200160"
    "0482015481526020016005820160009054906101000a900460a01b73ffffffffffffffffff"
    "ffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff191681"
    "5260200160058201600c9054906101000a90046fffffffffffffffffffffffffffffffff16"
    "6fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681"
    "52602001600682018054806020026020016040519081016040528092919081815260200182"
    "8054801561114057602002820191906000526020600020906000905b82829054906101000a"
    "900460000b60000b8152602001906001019060208260000104928301926001038202915080"
    "84116111095790505b505050505081526020016007820160009054906101000a900460ff16"
    "1515151581525050815250509050919050565b6060808383915091509250929050565b6111"
    "876129d9565b600a6040518060400160405290816000820160009054906101000a90046001"
    "0b60010b60010b815260200160018201604051806101200160405290816000820180548060"
    "20026020016040519081016040528092919081815260200182805480156112115760200282"
    "0191906000526020600020905b8154815260200190600101908083116111fd575b50505050"
    "50815260200160018201805461122a906147f9565b80601f01602080910402602001604051"
    "90810160405280929190818152602001828054611256906147f9565b80156112a35780601f"
    "10611278576101008083540402835291602001916112a3565b820191906000526020600020"
    "905b81548152906001019060200180831161128657829003601f168201915b505050505081"
    "52602001600282018054806020026020016040519081016040528092919081815260200182"
    "805480156112fb57602002820191906000526020600020905b815481526020019060010190"
    "8083116112e7575b505050505081526020016003820160009054906101000a900460401b67"
    "ffffffffffffffff191667ffffffffffffffff191681526020016004820154815260200160"
    "05820160009054906101000a900460a01b73ffffffffffffffffffffffffffffffffffffff"
    "ff191673ffffffffffffffffffffffffffffffffffffffff1916815260200160058201600c"
    "9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffff"
    "ffffffffffffff166fffffffffffffffffffffffffffffffff168152602001600682018054"
    "8060200260200160405190810160405280929190818152602001828054801561143f576020"
    "02820191906000526020600020906000905b82829054906101000a900460000b60000b8152"
    "60200190600101906020826000010492830192600103820291508084116114085790505b50"
    "5050505081526020016007820160009054906101000a900460ff1615151515815250508152"
    "5050905090565b61147461273b565b60136040518060600160405290816000820160009054"
    "906101000a900460030b60030b60030b81526020016000820160049054906101000a900460"
    "070b60070b60070b8152602001600182016040518060400160405290816000820160009054"
    "906101000a900460010b60010b60010b815260200160018201604051806101200160405290"
    "81600082018054806020026020016040519081016040528092919081815260200182805480"
    "1561154857602002820191906000526020600020905b815481526020019060010190808311"
    "611534575b50505050508152602001600182018054611561906147f9565b80601f01602080"
    "9104026020016040519081016040528092919081815260200182805461158d906147f9565b"
    "80156115da5780601f106115af576101008083540402835291602001916115da565b820191"
    "906000526020600020905b8154815290600101906020018083116115bd57829003601f1682"
    "01915b50505050508152602001600282018054806020026020016040519081016040528092"
    "9190818152602001828054801561163257602002820191906000526020600020905b815481"
    "52602001906001019080831161161e575b5050505050815260200160038201600090549061"
    "01000a900460401b67ffffffffffffffff191667ffffffffffffffff191681526020016004"
    "82015481526020016005820160009054906101000a900460a01b73ffffffffffffffffffff"
    "ffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff19168152"
    "60200160058201600c9054906101000a90046fffffffffffffffffffffffffffffffff166f"
    "ffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152"
    "60200160068201805480602002602001604051908101604052809291908181526020018280"
    "54801561177657602002820191906000526020600020906000905b82829054906101000a90"
    "0460000b60000b815260200190600101906020826000010492830192600103820291508084"
    "1161173f5790505b505050505081526020016007820160009054906101000a900460ff1615"
    "151515815250508152505081525050905090565b6117af6129fc565b816002600082015181"
    "60000190805190602001906117ce929190612768565b506020820151816001019080519060"
    "2001906117eb9291906127b5565b5060408201518160020190805190602001906118089291"
    "9061283b565b5060608201518160030160006101000a81548177ffffffffffffffffffffff"
    "ffffffffffffffffffffffffff021916908360401c02179055506080820151816004015560"
    "a08201518160050160006101000a8154816bffffffffffffffffffffffff021916908360a0"
    "1c021790555060c082015181600501600c6101000a8154816fffffffffffffffffffffffff"
    "ffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060e0820151"
    "8160060190805190602001906118d2929190612888565b5061010082015181600701600061"
    "01000a81548160ff0219169083151502179055509050506002604051806101200160405290"
    "81600082018054806020026020016040519081016040528092919081815260200182805480"
    "1561195457602002820191906000526020600020905b815481526020019060010190808311"
    "611940575b5050505050815260200160018201805461196d906147f9565b80601f01602080"
    "91040260200160405190810160405280929190818152602001828054611999906147f9565b"
    "80156119e65780601f106119bb576101008083540402835291602001916119e6565b820191"
    "906000526020600020905b8154815290600101906020018083116119c957829003601f1682"
    "01915b50505050508152602001600282018054806020026020016040519081016040528092"
    "91908181526020018280548015611a3e57602002820191906000526020600020905b815481"
    "526020019060010190808311611a2a575b5050505050815260200160038201600090549061"
    "01000a900460401b67ffffffffffffffff191667ffffffffffffffff191681526020016004"
    "82015481526020016005820160009054906101000a900460a01b73ffffffffffffffffffff"
    "ffffffffffffffffffff191673ffffffffffffffffffffffffffffffffffffffff19168152"
    "60200160058201600c9054906101000a90046fffffffffffffffffffffffffffffffff166f"
    "ffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152"
    "60200160068201805480602002602001604051908101604052809291908181526020018280"
    "548015611b8257602002820191906000526020600020906000905b82829054906101000a90"
    "0460000b60000b815260200190600101906020826000010492830192600103820291508084"
    "11611b4b5790505b505050505081526020016007820160009054906101000a900460ff1615"
    "151515815250509050919050565b6000808383915091509250929050565b60008060008087"
    "8787879350935093509350945094509450949050565b611be26129fc565b60026040518061"
    "01200160405290816000820180548060200260200160405190810160405280929190818152"
    "6020018280548015611c3f57602002820191906000526020600020905b8154815260200190"
    "60010190808311611c2b575b50505050508152602001600182018054611c58906147f9565b"
    "80601f0160208091040260200160405190810160405280929190818152602001828054611c"
    "84906147f9565b8015611cd15780601f10611ca65761010080835404028352916020019161"
    "1cd1565b820191906000526020600020905b815481529060010190602001808311611cb457"
    "829003601f168201915b505050505081526020016002820180548060200260200160405190"
    "8101604052809291908181526020018280548015611d295760200282019190600052602060"
    "0020905b815481526020019060010190808311611d15575b50505050508152602001600382"
    "0160009054906101000a900460401b67ffffffffffffffff191667ffffffffffffffff1916"
    "8152602001600482015481526020016005820160009054906101000a900460a01b73ffffff"
    "ffffffffffffffffffffffffffffffffff191673ffffffffffffffffffffffffffffffffff"
    "ffffff1916815260200160058201600c9054906101000a90046fffffffffffffffffffffff"
    "ffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffff"
    "ffffffff168152602001600682018054806020026020016040519081016040528092919081"
    "81526020018280548015611e6d57602002820191906000526020600020906000905b828290"
    "54906101000a900460000b60000b8152602001906001019060208260000104928301926001"
    "0382029150808411611e365790505b50505050508152602001600782016000905490610100"
    "0a900460ff161515151581525050905090565b611e9e6129fc565b611ea66129b8565b8360"
    "026000820151816000019080519060200190611ec5929190612768565b5060208201518160"
    "01019080519060200190611ee29291906127b5565b50604082015181600201908051906020"
    "0190611eff92919061283b565b5060608201518160030160006101000a81548177ffffffff"
    "ffffffffffffffffffffffffffffffffffffffff021916908360401c021790555060808201"
    "51816004015560a08201518160050160006101000a8154816bffffffffffffffffffffffff"
    "021916908360a01c021790555060c082015181600501600c6101000a8154816fffffffffff"
    "ffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790"
    "555060e0820151816006019080519060200190611fc9929190612888565b50610100820151"
    "8160070160006101000a81548160ff02191690831515021790555090505082601d60008201"
    "5181600001908051906020019061200d929190612a81565b50602082015181600101908051"
    "906020019061202a929190612b34565b506040820151816002019080519060200190612047"
    "929190612b94565b509050506002601d816040518061012001604052908160008201805480"
    "6020026020016040519081016040528092919081815260200182805480156120ab57602002"
    "820191906000526020600020905b815481526020019060010190808311612097575b505050"
    "505081526020016001820180546120c4906147f9565b80601f016020809104026020016040"
    "51908101604052809291908181526020018280546120f0906147f9565b801561213d578060"
    "1f106121125761010080835404028352916020019161213d565b8201919060005260206000"
    "20905b81548152906001019060200180831161212057829003601f168201915b5050505050"
    "81526020016002820180548060200260200160405190810160405280929190818152602001"
    "828054801561219557602002820191906000526020600020905b8154815260200190600101"
    "90808311612181575b505050505081526020016003820160009054906101000a900460401b"
    "67ffffffffffffffff191667ffffffffffffffff1916815260200160048201548152602001"
    "6005820160009054906101000a900460a01b73ffffffffffffffffffffffffffffffffffff"
    "ffff191673ffffffffffffffffffffffffffffffffffffffff191681526020016005820160"
    "0c9054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffff"
    "ffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016006820180"
    "54806020026020016040519081016040528092919081815260200182805480156122d95760"
    "2002820191906000526020600020906000905b82829054906101000a900460000b60000b81"
    "5260200190600101906020826000010492830192600103820291508084116122a25790505b"
    "505050505081526020016007820160009054906101000a900460ff16151515158152505091"
    "50806040518060600160405290816000820180548060200260200160405190810160405280"
    "92919081815260200182805480156123805760200282019190600052602060002090600090"
    "5b82829054906101000a900460030b60030b81526020019060040190602082600301049283"
    "0192600103820291508084116123495790505b505050505081526020016001820180548060"
    "2002602001604051908101604052809291908181526020016000905b8282101561245a5783"
    "829060005260206000200180546123cd906147f9565b80601f016020809104026020016040"
    "51908101604052809291908181526020018280546123f9906147f9565b8015612446578060"
    "1f1061241b57610100808354040283529160200191612446565b8201919060005260206000"
    "20905b81548152906001019060200180831161242957829003601f168201915b5050505050"
    "815260200190600101906123ae565b50505050815260200160028201805480602002602001"
    "6040519081016040528092919081815260200182805480156124d757602002820191906000"
    "526020600020906000905b82829054906101000a900460070b60070b815260200190600801"
    "906020826007010492830192600103820291508084116124a05790505b5050505050815250"
    "509050915091509250929050565b6124f56129b8565b81601d600082015181600001908051"
    "9060200190612514929190612a81565b506020820151816001019080519060200190612531"
    "929190612b34565b50604082015181600201908051906020019061254e929190612b94565b"
    "50905050601d60405180606001604052908160008201805480602002602001604051908101"
    "6040528092919081815260200182805480156125d457602002820191906000526020600020"
    "906000905b82829054906101000a900460030b60030b815260200190600401906020826003"
    "0104928301926001038202915080841161259d5790505b5050505050815260200160018201"
    "805480602002602001604051908101604052809291908181526020016000905b8282101561"
    "26ae578382906000526020600020018054612621906147f9565b80601f0160208091040260"
    "20016040519081016040528092919081815260200182805461264d906147f9565b80156126"
    "9a5780601f1061266f5761010080835404028352916020019161269a565b82019190600052"
    "6020600020905b81548152906001019060200180831161267d57829003601f168201915b50"
    "5050505081526020019060010190612602565b505050508152602001600282018054806020"
    "0260200160405190810160405280929190818152602001828054801561272b576020028201"
    "91906000526020600020906000905b82829054906101000a900460070b60070b8152602001"
    "90600801906020826007010492830192600103820291508084116126f45790505b50505050"
    "50815250509050919050565b6040518060600160405280600060030b815260200160006007"
    "0b81526020016127626129d9565b81525090565b8280548282559060005260206000209081"
    "019282156127a4579160200282015b828111156127a3578251825591602001919060010190"
    "612788565b5b5090506127b19190612c53565b5090565b8280546127c1906147f9565b9060"
    "0052602060002090601f0160209004810192826127e3576000855561282a565b82601f1061"
    "27fc57805160ff191683800117855561282a565b8280016001018555821561282a57918201"
    "5b8281111561282957825182559160200191906001019061280e565b5b5090506128379190"
    "612c53565b5090565b82805482825590600052602060002090810192821561287757916020"
    "0282015b8281111561287657825182559160200191906001019061285b565b5b5090506128"
    "849190612c70565b5090565b82805482825590600052602060002090601f01602090048101"
    "9282156129215791602002820160005b838211156128f257835183826101000a81548160ff"
    "021916908360000b60ff160217905550926020019260010160208160000104928301926001"
    "03026128b1565b801561291f5782816101000a81549060ff02191690556001016020816000"
    "010492830192600103026128f2565b505b50905061292e9190612c53565b5090565b828054"
    "61293e906147f9565b90600052602060002090601f01602090048101928261296057600085"
    "556129a7565b82601f1061297957805160ff19168380011785556129a7565b828001600101"
    "855582156129a7579182015b828111156129a657825182559160200191906001019061298b"
    "565b5b5090506129b49190612c53565b5090565b6040518060600160405280606081526020"
    "0160608152602001606081525090565b6040518060400160405280600060010b8152602001"
    "6129f66129fc565b81525090565b6040518061012001604052806060815260200160608152"
    "60200160608152602001600067ffffffffffffffff19168152602001600080191681526020"
    "01600073ffffffffffffffffffffffffffffffffffffffff1916815260200160006fffffff"
    "ffffffffffffffffffffffffff168152602001606081526020016000151581525090565b82"
    "805482825590600052602060002090600701600890048101928215612b2357916020028201"
    "60005b83821115612af157835183826101000a81548163ffffffff021916908360030b63ff"
    "ffffff1602179055509260200192600401602081600301049283019260010302612aaa565b"
    "8015612b215782816101000a81549063ffffffff0219169055600401602081600301049283"
    "019260010302612af1565b505b509050612b309190612c53565b5090565b82805482825590"
    "6000526020600020908101928215612b83579160200282015b82811115612b825782518290"
    "80519060200190612b729291906127b5565b5091602001919060010190612b54565b5b5090"
    "50612b909190612c8d565b5090565b82805482825590600052602060002090600301600490"
    "048101928215612c425791602002820160005b83821115612c0c57835183826101000a8154"
    "8167ffffffffffffffff021916908360070b67ffffffffffffffff16021790555092602001"
    "92600801602081600701049283019260010302612bbd565b8015612c405782816101000a81"
    "549067ffffffffffffffff0219169055600801602081600701049283019260010302612c0c"
    "565b505b509050612c4f9190612c53565b5090565b5b80821115612c6c5760008160009055"
    "50600101612c54565b5090565b5b80821115612c89576000816000905550600101612c7156"
    "5b5090565b5b80821115612cad5760008181612ca49190612cb1565b50600101612c8e565b"
    "5090565b508054612cbd906147f9565b6000825580601f10612ccf5750612cee565b601f01"
    "6020900490600052602060002090810190612ced9190612c53565b5b50565b6000612d0461"
    "2cff8461433c565b614317565b90508083825260208201905082856020860282011115612d"
    "2357600080fd5b60005b85811015612d535781612d398882613220565b8452602084019350"
    "60208301925050600181019050612d26565b5050509392505050565b6000612d70612d6b84"
    "614368565b614317565b90508083825260208201905082856020860282011115612d8f5760"
    "0080fd5b60005b85811015612dbf5781612da58882613235565b8452602084019350602083"
    "01925050600181019050612d92565b5050509392505050565b6000612ddc612dd784614394"
    "565b614317565b90508083825260208201905082856020860282011115612dfb57600080fd"
    "5b60005b85811015612e2b5781612e11888261324a565b8452602084019350602083019250"
    "50600181019050612dfe565b5050509392505050565b6000612e48612e43846143c0565b61"
    "4317565b90508083825260208201905082856020860282011115612e6757600080fd5b6000"
    "5b85811015612e975781612e7d888261325f565b8452602084019350602083019250506001"
    "81019050612e6a565b5050509392505050565b6000612eb4612eaf846143ec565b61431756"
    "5b9050808382526020820190508260005b85811015612ef45781358501612eda8882613274"
    "565b845260208401935060208301925050600181019050612ec4565b505050939250505056"
    "5b6000612f11612f0c84614418565b614317565b9050808382526020820190508285602086"
    "0282011115612f3057600080fd5b60005b85811015612f605781612f468882613573565b84"
    "5260208401935060208301925050600181019050612f33565b5050509392505050565b6000"
    "612f7d612f7884614444565b614317565b9050808382526020820190508285602086028201"
    "1115612f9c57600080fd5b60005b85811015612fcc5781612fb28882613588565b84526020"
    "8401935060208301925050600181019050612f9f565b5050509392505050565b6000612fe9"
    "612fe484614470565b614317565b90508281526020810184848401111561300157600080fd"
    "5b61300c8482856147b7565b509392505050565b6000613027613022846144a1565b614317"
    "565b90508281526020810184848401111561303f57600080fd5b61304a8482856147b7565b"
    "509392505050565b600082601f83011261306357600080fd5b813561307384826020860161"
    "2cf1565b91505092915050565b600082601f83011261308d57600080fd5b813561309d8482"
    "60208601612d5d565b91505092915050565b600082601f8301126130b757600080fd5b8135"
    "6130c7848260208601612dc9565b91505092915050565b600082601f8301126130e1576000"
    "80fd5b81356130f1848260208601612e35565b91505092915050565b600082601f83011261"
    "310b57600080fd5b813561311b848260208601612ea1565b91505092915050565b60008260"
    "1f83011261313557600080fd5b8135613145848260208601612efe565b9150509291505056"
    "5b600082601f83011261315f57600080fd5b813561316f848260208601612f6a565b915050"
    "92915050565b600081359050613187816148cb565b92915050565b60008135905061319c81"
    "6148e2565b92915050565b6000813590506131b1816148f9565b92915050565b6000813590"
    "506131c681614910565b92915050565b600082601f8301126131dd57600080fd5b81356131"
    "ed848260208601612fd6565b91505092915050565b60008135905061320581614927565b92"
    "915050565b60008135905061321a8161493e565b92915050565b60008135905061322f8161"
    "4955565b92915050565b6000813590506132448161496c565b92915050565b600081359050"
    "61325981614983565b92915050565b60008135905061326e8161499a565b92915050565b60"
    "0082601f83011261328557600080fd5b8135613295848260208601613014565b9150509291"
    "5050565b600061012082840312156132b157600080fd5b6132bc610120614317565b905060"
    "0082013567ffffffffffffffff8111156132d857600080fd5b6132e484828501613124565b"
    "600083015250602082013567ffffffffffffffff81111561330457600080fd5b6133108482"
    "8501613274565b602083015250604082013567ffffffffffffffff81111561333057600080"
    "fd5b61333c84828501613052565b6040830152506060613350848285016131a2565b606083"
    "0152506080613364848285016131b7565b60808301525060a06133788482850161318d565b"
    "60a08301525060c061338c8482850161355e565b60c08301525060e082013567ffffffffff"
    "ffffff8111156133ac57600080fd5b6133b8848285016130d0565b60e08301525061010061"
    "33cd84828501613178565b6101008301525092915050565b6000604082840312156133ec57"
    "600080fd5b6133f66040614317565b905060006134068482850161320b565b600083015250"
    "602082013567ffffffffffffffff81111561342657600080fd5b6134328482850161329e56"
    "5b60208301525092915050565b60006060828403121561345057600080fd5b61345a606061"
    "4317565b9050600061346a84828501613235565b600083015250602061347e848285016132"
    "4a565b602083015250604082013567ffffffffffffffff81111561349e57600080fd5b6134"
    "aa848285016133da565b60408301525092915050565b6000606082840312156134c8576000"
    "80fd5b6134d26060614317565b9050600082013567ffffffffffffffff8111156134ee5760"
    "0080fd5b6134fa8482850161307c565b600083015250602082013567ffffffffffffffff81"
    "111561351a57600080fd5b613526848285016130fa565b602083015250604082013567ffff"
    "ffffffffffff81111561354657600080fd5b613552848285016130a6565b60408301525092"
    "915050565b60008135905061356d816149b1565b92915050565b6000813590506135828161"
    "49c8565b92915050565b600081359050613597816149df565b92915050565b600081359050"
    "6135ac816149f6565b92915050565b600080604083850312156135c557600080fd5b600083"
    "013567ffffffffffffffff8111156135df57600080fd5b6135eb8582860161314e565b9250"
    "50602083013567ffffffffffffffff81111561360857600080fd5b61361485828601613052"
    "565b9150509250929050565b6000806040838503121561363157600080fd5b600061363f85"
    "8286016131a2565b9250506020613650858286016131b7565b9150509250929050565b6000"
    "806040838503121561366d57600080fd5b600083013567ffffffffffffffff811115613687"
    "57600080fd5b613693858286016131cc565b925050602083013567ffffffffffffffff8111"
    "156136b057600080fd5b6136bc858286016131cc565b9150509250929050565b6000806040"
    "83850312156136d957600080fd5b600083013567ffffffffffffffff8111156136f3576000"
    "80fd5b6136ff85828601613274565b925050602083013567ffffffffffffffff8111156137"
    "1c57600080fd5b61372885828601613274565b9150509250929050565b6000602082840312"
    "1561374457600080fd5b600082013567ffffffffffffffff81111561375e57600080fd5b61"
    "376a8482850161329e565b91505092915050565b6000806040838503121561378657600080"
    "fd5b600083013567ffffffffffffffff8111156137a057600080fd5b6137ac858286016132"
    "9e565b925050602083013567ffffffffffffffff8111156137c957600080fd5b6137d58582"
    "86016134b6565b9150509250929050565b6000602082840312156137f157600080fd5b6000"
    "82013567ffffffffffffffff81111561380b57600080fd5b613817848285016133da565b91"
    "505092915050565b60006020828403121561383257600080fd5b600082013567ffffffffff"
    "ffffff81111561384c57600080fd5b6138588482850161343e565b91505092915050565b60"
    "006020828403121561387357600080fd5b600082013567ffffffffffffffff81111561388d"
    "57600080fd5b613899848285016134b6565b91505092915050565b60008060008060808587"
    "0312156138b857600080fd5b60006138c68782880161359d565b94505060206138d7878288"
    "01613588565b93505060406138e8878288016131f6565b92505060606138f9878288016132"
    "20565b91505092959194509250565b60006139118383613d61565b60208301905092915050"
    "565b60006139298383613d7f565b60208301905092915050565b60006139418383613d8e56"
    "5b60208301905092915050565b60006139598383613d9d565b60208301905092915050565b"
    "60006139718383613dac565b905092915050565b60006139858383614109565b6020830190"
    "5092915050565b600061399d8383614118565b60208301905092915050565b60006139b482"
    "614542565b6139be8185614600565b93506139c9836144d2565b8060005b838110156139fa"
    "5781516139e18882613905565b97506139ec836145a5565b9250506001810190506139cd56"
    "5b5085935050505092915050565b6000613a1282614542565b613a1c8185614611565b9350"
    "613a27836144d2565b8060005b83811015613a58578151613a3f8882613905565b9750613a"
    "4a836145a5565b925050600181019050613a2b565b5085935050505092915050565b600061"
    "3a708261454d565b613a7a8185614622565b9350613a85836144e2565b8060005b83811015"
    "613ab6578151613a9d888261391d565b9750613aa8836145b2565b92505060018101905061"
    "3a89565b5085935050505092915050565b6000613ace82614558565b613ad8818561463356"
    "5b9350613ae3836144f2565b8060005b83811015613b14578151613afb8882613935565b97"
    "50613b06836145bf565b925050600181019050613ae7565b5085935050505092915050565b"
    "6000613b2c82614563565b613b368185614644565b9350613b4183614502565b8060005b83"
    "811015613b72578151613b59888261394d565b9750613b64836145cc565b92505060018101"
    "9050613b45565b5085935050505092915050565b6000613b8a8261456e565b613b94818561"
    "4655565b935083602082028501613ba685614512565b8060005b85811015613be257848403"
    "89528151613bc38582613965565b9450613bce836145d9565b925060208a01995050600181"
    "019050613baa565b50829750879550505050505092915050565b6000613bff82614579565b"
    "613c098185614666565b9350613c1483614522565b8060005b83811015613c45578151613c"
    "2c8882613979565b9750613c37836145e6565b925050600181019050613c18565b50859350"
    "50505092915050565b6000613c5d82614584565b613c678185614677565b9350613c728361"
    "4532565b8060005b83811015613ca3578151613c8a8882613991565b9750613c95836145f3"
    "565b925050600181019050613c76565b5085935050505092915050565b613cb9816146bb56"
    "5b82525050565b613cc8816146c7565b82525050565b613cd7816146f3565b82525050565b"
    "613ce6816146f3565b82525050565b613cf58161471f565b82525050565b613d048161471f"
    "565b82525050565b6000613d158261458f565b613d1f8185614688565b9350613d2f818560"
    "2086016147c6565b613d38816148ba565b840191505092915050565b613d4c81614729565b"
    "82525050565b613d5b81614736565b82525050565b613d6a81614743565b82525050565b61"
    "3d7981614743565b82525050565b613d888161474d565b82525050565b613d978161475a56"
    "5b82525050565b613da681614767565b82525050565b6000613db78261459a565b613dc181"
    "85614699565b9350613dd18185602086016147c6565b613dda816148ba565b840191505092"
    "915050565b6000613df08261459a565b613dfa81856146aa565b9350613e0a818560208601"
    "6147c6565b613e13816148ba565b840191505092915050565b600061012083016000830151"
    "8482036000860152613e3c8282613bf4565b91505060208301518482036020860152613e56"
    "8282613dac565b91505060408301518482036040860152613e7082826139a9565b91505060"
    "60830151613e856060860182613cce565b506080830151613e986080860182613cec565b50"
    "60a0830151613eab60a0860182613cbf565b5060c0830151613ebe60c08601826140fa565b"
    "5060e083015184820360e0860152613ed68282613b21565b915050610100830151613eed61"
    "0100860182613cb0565b508091505092915050565b60006101208301600083015184820360"
    "00860152613f168282613bf4565b91505060208301518482036020860152613f308282613d"
    "ac565b91505060408301518482036040860152613f4a82826139a9565b9150506060830151"
    "613f5f6060860182613cce565b506080830151613f726080860182613cec565b5060a08301"
    "51613f8560a0860182613cbf565b5060c0830151613f9860c08601826140fa565b5060e083"
    "015184820360e0860152613fb08282613b21565b915050610100830151613fc76101008601"
    "82613cb0565b508091505092915050565b6000604083016000830151613fea600086018261"
    "3d52565b50602083015184820360208601526140028282613e1e565b915050809150509291"
    "5050565b60006040830160008301516140276000860182613d52565b506020830151848203"
    "602086015261403f8282613e1e565b9150508091505092915050565b600060608301600083"
    "01516140646000860182613d7f565b5060208301516140776020860182613d8e565b506040"
    "830151848203604086015261408f8282613fd2565b9150508091505092915050565b600060"
    "608301600083015184820360008601526140b98282613a65565b9150506020830151848203"
    "60208601526140d38282613b7f565b915050604083015184820360408601526140ed828261"
    "3ac3565b9150508091505092915050565b61410381614774565b82525050565b6141128161"
    "4790565b82525050565b6141218161479a565b82525050565b6141308161479a565b825250"
    "50565b61413f816147aa565b82525050565b6000604082019050818103600083015261415f"
    "8185613c52565b905081810360208301526141738184613a07565b90509392505050565b60"
    "006040820190506141916000830185613cdd565b61419e6020830184613cfb565b93925050"
    "50565b600060408201905081810360008301526141bf8185613d0a565b9050818103602083"
    "01526141d38184613d0a565b90509392505050565b60006040820190508181036000830152"
    "6141f68185613de5565b9050818103602083015261420a8184613de5565b90509392505050"
    "565b6000602082019050818103600083015261422d8184613ef8565b905092915050565b60"
    "00604082019050818103600083015261424f8185613ef8565b905081810360208301526142"
    "63818461409c565b90509392505050565b6000602082019050818103600083015261428681"
    "8461400f565b905092915050565b600060208201905081810360008301526142a881846140"
    "4c565b905092915050565b600060208201905081810360008301526142ca818461409c565b"
    "905092915050565b60006080820190506142e76000830187614136565b6142f46020830186"
    "614127565b6143016040830185613d43565b61430e6060830184613d70565b959450505050"
    "50565b6000614321614332565b905061432d828261482b565b919050565b60006040519050"
    "90565b600067ffffffffffffffff8211156143575761435661488b565b5b60208202905060"
    "2081019050919050565b600067ffffffffffffffff8211156143835761438261488b565b5b"
    "602082029050602081019050919050565b600067ffffffffffffffff8211156143af576143"
    "ae61488b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211"
    "156143db576143da61488b565b5b602082029050602081019050919050565b600067ffffff"
    "ffffffffff8211156144075761440661488b565b5b60208202905060208101905091905056"
    "5b600067ffffffffffffffff8211156144335761443261488b565b5b602082029050602081"
    "019050919050565b600067ffffffffffffffff82111561445f5761445e61488b565b5b6020"
    "82029050602081019050919050565b600067ffffffffffffffff82111561448b5761448a61"
    "488b565b5b614494826148ba565b9050602081019050919050565b600067ffffffffffffff"
    "ff8211156144bc576144bb61488b565b5b6144c5826148ba565b9050602081019050919050"
    "565b6000819050602082019050919050565b6000819050602082019050919050565b600081"
    "9050602082019050919050565b6000819050602082019050919050565b6000819050602082"
    "019050919050565b6000819050602082019050919050565b60008190506020820190509190"
    "50565b600081519050919050565b600081519050919050565b600081519050919050565b60"
    "0081519050919050565b600081519050919050565b600081519050919050565b6000815190"
    "50919050565b600081519050919050565b600081519050919050565b600060208201905091"
    "9050565b6000602082019050919050565b6000602082019050919050565b60006020820190"
    "50919050565b6000602082019050919050565b6000602082019050919050565b6000602082"
    "019050919050565b600082825260208201905092915050565b600082825260208201905092"
    "915050565b600082825260208201905092915050565b600082825260208201905092915050"
    "565b600082825260208201905092915050565b600082825260208201905092915050565b60"
    "0082825260208201905092915050565b600082825260208201905092915050565b60008282"
    "5260208201905092915050565b600082825260208201905092915050565b60008282526020"
    "8201905092915050565b60008115159050919050565b60007fffffffffffffffffffffffff"
    "000000000000000000000000000000000000000082169050919050565b60007fffffffffff"
    "ffffffffffffffffffffffffffffffffffffff000000000000000082169050919050565b60"
    "00819050919050565b600081600f0b9050919050565b60008160010b9050919050565b6000"
    "819050919050565b60008160030b9050919050565b60008160070b9050919050565b600081"
    "60000b9050919050565b60006fffffffffffffffffffffffffffffffff8216905091905056"
    "5b6000819050919050565b600063ffffffff82169050919050565b600060ff821690509190"
    "50565b82818337600083830152505050565b60005b838110156147e4578082015181840152"
    "6020810190506147c9565b838111156147f3576000848401525b50505050565b6000600282"
    "049050600182168061481157607f821691505b602082108114156148255761482461485c56"
    "5b5b50919050565b614834826148ba565b810181811067ffffffffffffffff821117156148"
    "535761485261488b565b5b80604052505050565b7f4e487b71000000000000000000000000"
    "00000000000000000000000000000000600052602260045260246000fd5b7f4e487b710000"
    "00000000000000000000000000000000000000000000000000006000526041600452602460"
    "00fd5b6000601f19601f8301169050919050565b6148d4816146bb565b81146148df576000"
    "80fd5b50565b6148eb816146c7565b81146148f657600080fd5b50565b614902816146f356"
    "5b811461490d57600080fd5b50565b6149198161471f565b811461492457600080fd5b5056"
    "5b61493081614729565b811461493b57600080fd5b50565b61494781614736565b81146149"
    "5257600080fd5b50565b61495e81614743565b811461496957600080fd5b50565b61497581"
    "61474d565b811461498057600080fd5b50565b61498c8161475a565b811461499757600080"
    "fd5b50565b6149a381614767565b81146149ae57600080fd5b50565b6149ba81614774565b"
    "81146149c557600080fd5b50565b6149d181614790565b81146149dc57600080fd5b50565b"
    "6149e88161479a565b81146149f357600080fd5b50565b6149ff816147aa565b8114614a0a"
    "57600080fd5b5056fea2646970667358221220bcc204eff28221b87df185b42c3bfa6512de"
    "718d4c983912012bc915476ea79964736f6c63430008030033";
Address addr;

template <typename T>
bool CompareSlice(const T &l, const T &r) {
  if (l.size() != r.size()) {
    return false;
  }
  for (size_t i = 0; i < l.size(); i++) {
    if (l[i] != r[i]) {
      return false;
    }
  }
  return true;
}

cross::AbiTest_SA sa = {std::vector<std::uint256_t>{1, 2, 3},
                        "hello",
                        std::vector<std::int256_t>{4, 5, 6},
                        std::array<uint8_t, 24>{1, 2, 3},
                        std::array<uint8_t, 32>{4, 5, 6},
                        std::array<uint8_t, 12>{7, 8, 9},
                        22,
                        std::vector<int8_t>{9, 10},
                        true};

cross::AbiTest_SB sb = {23, sa};

cross::AbiTest_SC sc = {24, 25, sb};

cross::AbiTest_SD sd = {std::vector<int32_t>{1, 2, 3},
                        std::vector<std::string>{"hello", "world"},
                        std::vector<int64_t>{4, 5, 6}};

#define ASSERT_SA(s, r)           \
  ASSERT(CompareSlice(s.a, r.a)); \
  ASSERT_EQ(s.b, r.b);            \
  ASSERT(CompareSlice(s.c, r.c)); \
  ASSERT(CompareSlice(s.d, r.d)); \
  ASSERT(CompareSlice(s.e, r.e)); \
  ASSERT(CompareSlice(s.f, r.f)); \
  ASSERT_EQ(s.g, r.g);            \
  ASSERT(CompareSlice(s.h, r.h)); \
  ASSERT_EQ(s.i, r.i);

#define ASSERT_SB(s, r) \
  ASSERT_EQ(s.a, r.a);  \
  ASSERT_SA(s.b, r.b)
#define ASSERT_SC(s, r) \
  ASSERT_EQ(s.a, r.a);  \
  ASSERT_EQ(s.b, r.b);  \
  ASSERT_SB(s.c, r.c);
#define ASSERT_SD(s, r)           \
  ASSERT(CompareSlice(s.a, r.a)); \
  ASSERT(CompareSlice(s.b, r.b)); \
  ASSERT(CompareSlice(s.c, r.c));

TEST_CASE(cross, deploy) {
  auto result = fromHex(kSolCode);
  uint64_t value = 0;
  auto gas = platon_gas();
  bytes value_bytes = value_to_bytes(value);
  bytes gas_bytes = value_to_bytes(gas);
  bool success = platon_deploy(addr.data(), result.data(), result.size(),
                               value_bytes.data(), value_bytes.size(),
                               gas_bytes.data(), gas_bytes.size()) == 0;
  ASSERT(success, "deploy solidity contract success");
}

TEST_CASE(cross, set_sa) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::setA(addr, value, gas, sa);
  auto sa2 = std::get<0>(std::get<0>(res));
  ASSERT_SA(sa, sa2)
  auto success = std::get<1>(res);
  ASSERT(success, "call setA failed");
}

TEST_CASE(cross, get_sa) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::getA(addr, value, gas);
  auto sa2 = std::get<0>(std::get<0>(res));
  ASSERT_SA(sa, sa2)
  auto success = std::get<1>(res);
  ASSERT(success, "call getA failed");
}

TEST_CASE(cross, set_sb) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::setB(addr, value, gas, sb);
  auto r = std::get<0>(std::get<0>(res));
  ASSERT_SB(sb, r)
  auto success = std::get<1>(res);
  ASSERT(success, "call setB failed");
}

TEST_CASE(cross, get_sb) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::getB(addr, value, gas);
  auto r = std::get<0>(std::get<0>(res));
  ASSERT_SB(sb, r)
  auto success = std::get<1>(res);
  ASSERT(success, "call getB failed");
}

TEST_CASE(cross, set_sc) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::setC(addr, value, gas, sc);
  auto r = std::get<0>(std::get<0>(res));
  ASSERT_SC(sc, r)
  auto success = std::get<1>(res);
  ASSERT(success, "call setC failed");
}

TEST_CASE(cross, get_sc) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::getC(addr, value, gas);
  auto r = std::get<0>(std::get<0>(res));
  ASSERT_SC(sc, r)
  auto success = std::get<1>(res);
  ASSERT(success, "call setC failed");
}

TEST_CASE(cross, set_sd) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::setD(addr, value, gas, sd);
  auto r = std::get<0>(std::get<0>(res));
  ASSERT_SD(sd, r)
  auto success = std::get<1>(res);
  ASSERT(success, "call setD failed");
}

TEST_CASE(cross, get_sd) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::getD(addr, value, gas);
  auto r = std::get<0>(std::get<0>(res));
  ASSERT_SD(sd, r)
  auto success = std::get<1>(res);
  ASSERT(success, "call getD failed");
}

TEST_CASE(cross, set_ad) {
  auto gas = platon_gas();
  uint64_t value = 0;

  auto res = cross::setAD(addr, value, gas, sa, sd);
  auto r = std::get<0>(res);
  auto sa2 = std::get<0>(r);
  auto sd2 = std::get<1>(r);
  ASSERT_SA(sa, sa2)
  ASSERT_SD(sd, sd2)
  auto success = std::get<1>(res);
  ASSERT(success, "call setAD failed");
}
TEST_CASE(cross, set_int) {
  auto gas = platon_gas();
  uint64_t value = 0;
  uint8_t a = 13;
  uint32_t b = 5789;
  u128 c = 987987987;
  std::int256_t d = "2132234234234234"_int256;
  auto res = cross::setInt(addr, value, gas, a, b, c, d);
  auto r = std::get<0>(res);
  auto a2 = std::get<0>(r);
  auto b2 = std::get<1>(r);
  auto c2 = std::get<2>(r);
  auto d2 = std::get<3>(r);
  ASSERT_EQ(a, a2);
  ASSERT_EQ(b, b2);
  ASSERT_EQ(c, c2);
  ASSERT_EQ(d, d2);
  auto success = std::get<1>(res);
  ASSERT(success, "call setInt failed");
}

TEST_CASE(cross, set_int_array) {
  auto gas = platon_gas();
  uint64_t value = 0;
  std::vector<uint32_t> a = {13, 14, 15, 16, 17};
  std::vector<std::int256_t> b = {"2132234234234234"_int256,
                                  "2152234234234234"_int256,
                                  "2162234234234234"_int256};
  auto res = cross::setIntArray(addr, value, gas, a, b);
  auto r = std::get<0>(res);
  auto a2 = std::get<0>(r);
  auto b2 = std::get<1>(r);
  ASSERT(CompareSlice(a, a2));
  ASSERT(CompareSlice(b, b2));
  auto success = std::get<1>(res);
  ASSERT(success, "call setInt failed");
}

TEST_CASE(cross, set_array) {
  auto gas = platon_gas();
  uint64_t value = 0;
  std::array<uint8_t, 24> a = {13, 14, 15, 16, 17};
  std::array<uint8_t, 32> b = {18, 19, 20, 21};
  auto res = cross::setArray(addr, value, gas, a, b);
  auto r = std::get<0>(res);
  auto a2 = std::get<0>(r);
  auto b2 = std::get<1>(r);
  ASSERT(CompareSlice(a, a2));
  ASSERT(CompareSlice(b, b2));
  auto success = std::get<1>(res);
  ASSERT(success, "call setArray failed");
}

TEST_CASE(cross, set_string) {
  auto gas = platon_gas();
  uint64_t value = 0;
  std::string a = "hello";
  std::string b = "world";
  auto res = cross::setString(addr, value, gas, a, b);
  auto r = std::get<0>(res);
  auto a2 = std::get<0>(r);
  auto b2 = std::get<1>(r);
  ASSERT_EQ(a, a2);
  ASSERT_EQ(b, b2);
  auto success = std::get<1>(res);
  ASSERT(success, "call setString failed");
}

TEST_CASE(cross, set_bytes) {
  auto gas = platon_gas();
  uint64_t value = 0;
  std::vector<uint8_t> a = {1, 2, 3, 4};
  std::vector<uint8_t> b = {5, 6, 7, 8};
  auto res = cross::setBytes(addr, value, gas, a, b);
  auto r = std::get<0>(res);
  auto a2 = std::get<0>(r);
  auto b2 = std::get<1>(r);
  ASSERT(CompareSlice(b, a2));
  ASSERT(CompareSlice(b, b2));
  auto success = std::get<1>(res);
  ASSERT(success, "call setBytes failed");
}

UNITTEST_MAIN() {
  RUN_TEST(cross, deploy)
  RUN_TEST(cross, set_sa)
  RUN_TEST(cross, get_sa)
  RUN_TEST(cross, set_sb)
  RUN_TEST(cross, get_sb)
  RUN_TEST(cross, set_sc)
  RUN_TEST(cross, get_sc)
  RUN_TEST(cross, set_sd)
  RUN_TEST(cross, get_sd)
  RUN_TEST(cross, set_ad)
  RUN_TEST(cross, set_int)
  RUN_TEST(cross, set_int_array)
  RUN_TEST(cross, set_array)
  RUN_TEST(cross, set_bytes)
}

/*
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.2;
contract AbiTest {

struct SA { // Struct
    uint[] a;
    string b;
    int[] c;
    bytes24 d;
    bytes32 e;
    bytes12 f;
    uint128 g;
    int8[] h;
    bool i;
}

struct SB { // Struct
    int16 a;
    SA b;
}

struct SC { // Struct
    int32 a;
    int64 b;
    SB c;
}

struct SD { // Struct
    int32[] a;
    string[] b;
    int64[] c;
}


function setA(SA memory v) public returns (SA memory) {
    sa = v;
    return sa;
}
function getA() public view returns  (SA memory) {
    return sa;
}
function setB(SB memory v) public returns (SB memory) {
    sb = v;
    return sb;
}
function getB() public view returns   (SB memory) {
    return sb;
}
function setC(SC memory v) public returns (SC memory) {
    sc = v;
    return sc;
}
function getC() public view returns   (SC memory) {
    return sc;
}
function setD(SD memory v) public returns (SD memory) {
    sd = v;
    return sd;
}

function getD() public view returns   (SD memory) {
    return sd;
}

function setAD(SA memory v,SD memory v2) public returns (SA memory, SD memory) {
    sa = v;
    sd = v2;
    return (sa,sd);
}
function setInt(uint8 a, uint32 b, int128 c, int256 d) public pure
returns(uint8, uint32, int128, int256){ return (a, b, c, d);
}
function setIntArray(uint32[] memory a, int256[] memory b) public pure
returns(uint32[] memory, int256[] memory){ return (a, b);
}
function setArray(bytes24 a, bytes32 b) public pure returns(bytes24, bytes32){
    return (a,b);
}
function setString(string memory a, string memory b) public returns(string
memory, string memory){ ta = a; ta = b; return (ta, ta);
}
function setBytes(bytes memory a, bytes memory b) public returns(bytes memory,
bytes memory){ ba = a; ba = b; return (ba, ba);
}

string ta;
bytes ba;
SA sa;
SB sb;
SC sc;
SD sd;
}
 */