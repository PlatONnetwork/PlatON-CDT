#include "platon/crypto/bn256/borromean.hpp"
#include "platon/chain_impl.hpp"
#include "platon/common.h"
#include "unit_test.hpp"
using namespace platon;
using namespace platon::crypto::bn256;

TEST_CASE(borromean, sign) {
  std::vector<std::vector<G1>> rings = {
      {{"16731420701753189781892876003626563727492088448685300788863364087108380345750"_uint256,
        "18458366252006401422560324772327247254028444263164787654782978124002690772937"_uint256},
       {"1784872166316510756933294980475259248036679113288273739719776782590526958099"_uint256,
        "15339692590139815177868116488054975582463508645937842537046422470913897887706"_uint256},
       {"14266040853499719791999413586660156604926467727235918792628044150187432164956"_uint256,
        "18122701243548022858301144826137742125142649846523103311035720454379673025867"_uint256},
       {"7382806340009081126317392055178218584588875356851038117885511148549570163089"_uint256,
        "12447270024746191977965657628350091897330831341312831314616783398765485176537"_uint256}},
      {{"3361507179936611352542095731441295466711004481747815211945375029559034495302"_uint256,
        "15894840458622179413469342163953845087343245661099093434515245341004242790390"_uint256},
       {"12830139721457409764803464105160589881086544236546278468247776765954418101340"_uint256,
        "8540191501467025821758294517780380627227474914218473658326283523687403946196"_uint256},
       {"16915172241372547909987343206358884279591183133222320927774487410569230688517"_uint256,
        "12907585119049940392775943190914311296679815646958439401020686736054981159640"_uint256},
       {"17008378886436396347078259383743016577710592530591893718725616929099683174428"_uint256,
        "13879937257856563574660544131556551431634675386992557190275096834400149018002"_uint256}}};
  std::vector<std::uint256_t> secrets = {
      "16291279333702204965798794786446708239052032093488912460031642949986189689229"_uint256,
      "17910684934262492637658778117460147226186589894251236653470347821244041140850"_uint256};
  std::vector<size_t> index = {2, 2};
  std::vector<std::vector<std::uint256_t>> s = {
      {"21040941597611475283401793766927417196821355075811465620299751647245097212158"_uint256,
       "7849156590552248257853230313023038998838135225630191778331715777086281052882"_uint256,
       "5329991040395034798569762434664594722409500379652873860457835741243485808889"_uint256,
       "13233285836620763805661810236190326599046987136680349891961906388778288725883"_uint256},
      {"1466337568414911749710665155446015103769096393045276122689365400702280149480"_uint256,
       "11772240203158009853106527274895599524044531649544403156930312413719443430762"_uint256,
       "13022659631314785958674712664588524891941974484500810858920917825419473674571"_uint256,
       "13193854842728998984470956526933290326449941922257600766815479112769838746962"_uint256}};
  std::vector<std::uint256_t> k = {
      "10163543160609968913535850852867230347821198216036512868030742853266636519354"_uint256,
      "18885484086779849156377244953340188377251705456506584852340960544751361322126"_uint256};

  std::vector<uint8_t> origin = {1, 2, 3, 4};
  h256 message = platon_sha3(origin);
  auto res = Borromean::Sign(rings, secrets, index, k, message, s);
  ASSERT(Borromean::Verify(rings, res.first, s, message));
}

UNITTEST_MAIN() { RUN_TEST(borromean, sign); }