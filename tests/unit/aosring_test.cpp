
#include "platon/crypto/bn256/aosring.hpp"
#include "platon/chain_impl.hpp"
#include "platon/common.h"
#include "unit_test.hpp"
using namespace platon;
using namespace platon::crypto::bn256;

TEST_CASE(aosring, sign) {
  std::vector<G1> rings = {{"731130052216496716001968602802698455838001978167752160203263899276847807351"_uint256,"18240124325330809780317112247274366096852275043207673661287180984004204414280"_uint256},{"7310117421299919431640951984004792605045842152881172251928017546907849517384"_uint256,"15290405959454044572040567784820101842245223259374470136298421629779525273888"_uint256},{"13438403490264409695588198714619188126109901840429535839745822293426973285947"_uint256,"457444521027655265718320405421020275606842381646552238402568342348738409433"_uint256},{"16931018129630257039161379592724931546510773701088913645321318147015095678580"_uint256,"12405756161672757459359438539426601455022710073544347075621051834439331169510"_uint256}};
  std::uint256_t sk = "3011999981052130870350137105711489421131690683637057523425810396145296575920"_uint256;
  std::vector<std::uint256_t> tees = {"13503271286267599787575175649399662841097896087035805320611596397995555658534"_uint256,"5293469819436451583680687589928201413784427518534065467827606594325459701419"_uint256,"15526876597241848617385620845360854384272759891859938464915171261606391990938"_uint256,"14514908997195537705171958332457286777248570349100042492684100750983021556856"_uint256};
  std::uint256_t alpha = "3923037933274868640771054894215971106978412319151528957265800834449223351345"_uint256;
  std::uint256_t m = "75324853612553155148101705479459417092337999016911450767604251866887535252027"_uint256;



  auto c = AosRing::Sign(rings, sk, 1, tees, alpha, m);
  ASSERT(AosRing::Verify(rings, tees, c, m));
}
UNITTEST_MAIN() { RUN_TEST(aosring, sign); }
